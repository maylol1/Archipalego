<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Archipelago ‚Äî a tiny creative strategic game</title>
<style>
:root{--bg:#0b1220;--panel:#0f1724;--accent:#7dd3fc;--muted:#94a3b8;--good:#86efac}
*{box-sizing:border-box;font-family:Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial}
html,body{height:100%;margin:0;background:linear-gradient(180deg,#071021 0%, #071827 60%);color:#e6eef8}
.app{display:grid;grid-template-columns:1fr 340px;gap:14px;height:100vh;padding:14px}
.panel{background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);border-radius:12px;padding:12px;box-shadow:0 6px 24px rgba(4,6,12,0.6)}
.canvas-wrap{position:relative;border-radius:12px;overflow:hidden}
canvas{display:block;width:100%;height:100%;background:linear-gradient(180deg,#07314b 0%, #022031 70%)}
.hud{position:absolute;left:12px;top:12px;background:rgba(2,6,12,0.45);padding:8px;border-radius:8px;backdrop-filter: blur(4px)}
.hud small{color:var(--muted);display:block}
.controls{display:flex;flex-direction:column;gap:8px}
.btn{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:10px;color:var(--accent);cursor:pointer}
.btn.secondary{color:var(--muted);border-style:dashed}
.title{font-weight:700;font-size:18px;margin-bottom:6px}
.stat{display:flex;align-items:center;gap:8px}
.side{display:flex;flex-direction:column;gap:12px}
.log{height:220px;overflow:auto;padding:8px;background:rgba(0,0,0,0.15);border-radius:8px}
.small{font-size:13px;color:var(--muted)}
.legend{display:flex;flex-wrap:wrap;gap:8px}
.legend .item{padding:6px 8px;border-radius:8px;background:rgba(255,255,255,0.02);font-size:13px}
footer{font-size:12px;color:var(--muted);}
.instructions{font-size:13px;line-height:1.4}
@media(max-width:900px){.app{grid-template-columns:1fr;grid-auto-rows:1fr;}}
</style>
</head>
<body>
<div class="app">
  <div class="panel canvas-wrap" id="gamePanel">
    <canvas id="game" width="1200" height="720"></canvas>
    <div class="hud" id="hud">
      <div class="stat"><div id="turn">Turn 1</div><small id="phase">Player</small></div>
      <div class="stat small"><span>Resources:</span> <b id="res">0</b></div>
    </div>
  </div>

  <aside class="panel side">
    <div>
      <div class="title">Archipelago</div>
      <div class="small">A tiny creative and strategic turn-based game built for GitHub Pages. Capture islands, gather resources, expand your influence, and outwit rival captains.</div>
    </div>

    <div class="controls">
      <button class="btn" id="newBtn">New Game</button>
      <button class="btn secondary" id="saveBtn">Save</button>
      <button class="btn secondary" id="loadBtn">Load</button>
      <button class="btn secondary" id="exportBtn">Export Map (JSON)</button>
    </div>

    <div>
      <div class="small">Legend</div>
      <div class="legend" id="legend">
        <div class="item">üèùÔ∏è Land</div>
        <div class="item">üåä Water</div>
        <div class="item">‚õµ Ship</div>
        <div class="item">üè∞ Outpost</div>
        <div class="item">üíé Resource</div>
      </div>
    </div>

    <div>
      <div class="small">Controls</div>
      <div class="instructions">
        - Click a ship to select. Click a tile to move. <br>
        - Capture land by moving a ship onto it. Each capture yields resources. <br>
        - Build Outpost on captured tile (cost 10). Outposts produce 3 resources / turn. <br>
        - End turn to pass to AI. Try to outgrow rivals.
      </div>
    </div>

    <div>
      <div class="small">Game Log</div>
      <div class="log" id="log"></div>
    </div>

    <footer>
      <div class="small">Publish: create a new GitHub repo and upload this single HTML file. Enable GitHub Pages on the repository's main branch.</div>
    </footer>
  </aside>
</div>

<script>
// Archipelago ‚Äî a compact single-file turn-based strategy game
// Author: ChatGPT (for publishing on GitHub Pages)
// Instructions: Save this file as archipelago.html and push to a public GitHub repo. Enable GitHub Pages.

(() => {
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  let W = canvas.width, H = canvas.height;

  const TILE = 32; // tile size
  const COLS = Math.floor(W / TILE);
  const ROWS = Math.floor(H / TILE);

  // Game state
  let state = {
    turn: 1,
    phase: 'player',
    resources: 20,
    map: [],
    units: [],
    players: [],
    log: []
  };

  // Utility
  const rand = (n) => Math.floor(Math.random()*n);
  const randf = (a,b) => a + Math.random()*(b-a);

  function pushLog(s){
    state.log.unshift({t:Date.now(), s});
    const el = document.getElementById('log');
    el.innerHTML = state.log.slice(0,50).map(x=>`<div style="padding:4px">${x.s}</div>`).join('');
  }

  // Generate map: perlin-like islands using simple noise
  function generateMap(){
    const map = Array.from({length:ROWS},()=>Array.from({length:COLS},()=>({type:'water',resource:0,owner:null,fort:false}))); 
    // Create seeds for islands
    const seeds = [];
    const islandCount = 6 + rand(4);
    for(let i=0;i<islandCount;i++) seeds.push({x:rand(COLS), y:rand(ROWS), r:6+rand(6)});
    for(let y=0;y<ROWS;y++)for(let x=0;x<COLS;x++){
      let v=0;
      for(const s of seeds){
        const dx = x-s.x, dy = y-s.y;
        const d = Math.sqrt(dx*dx+dy*dy);
        v += Math.max(0, (s.r+randf(-2,2)) - d);
      }
      if(v>5){
        map[y][x].type='land';
        if(Math.random()<0.04) map[y][x].resource = 5 + rand(8);
      }
    }
    return map;
  }

  function newGame(){
    state.turn = 1; state.phase='player'; state.resources=20; state.log=[];
    state.map = generateMap();
    state.players = [ {id:0,name:'You',color:'#86efac',ai:false}, {id:1,name:'Rival',color:'#fca5a5',ai:true} ];
    state.units = [];
    // Spawn player ships on random nearby water next to land
    function placeFor(playerId){
      for(let i=0;i<200;i++){
        const x = rand(COLS), y = rand(ROWS);
        if(state.map[y][x].type==='water'){
          // require adjacent land to be interesting
          const adjLand = neighbors(x,y).some(p=>state.map[p.y][p.x].type==='land');
          if(adjLand){ state.units.push({id:Date.now()+Math.random(),x,y,owner:playerId,moves:3}); break; }
        }
      }
    }
    placeFor(0);
    placeFor(1);
    pushLog('New game started.');
    renderHUD();
  }

  function neighbors(x,y){
    const out=[];
    for(let dy=-1;dy<=1;dy++)for(let dx=-1;dx<=1;dx++){
      if(dx===0 && dy===0) continue;
      const nx = x+dx, ny=y+dy;
      if(nx>=0 && ny>=0 && nx<COLS && ny<ROWS) out.push({x:nx,y:ny});
    }
    return out;
  }

  function render(){
    ctx.clearRect(0,0,W,H);
    // draw tiles
    for(let y=0;y<ROWS;y++)for(let x=0;x<COLS;x++){
      const t = state.map[y][x];
      const px = x*TILE, py = y*TILE;
      if(t.type==='water'){
        // slight wave effect
        const shade = Math.floor(30 + 20*Math.sin((x+y + performance.now()/500)/6));
        ctx.fillStyle = `rgb(0,${40+shade},${60+shade})`;
        ctx.fillRect(px,py,TILE,TILE);
      } else {
        ctx.fillStyle = '#2d6b3a';
        ctx.fillRect(px,py,TILE,TILE);
        // resource
        if(t.resource>0){ ctx.fillStyle = '#fef08a'; ctx.fillRect(px+TILE*0.5-6, py+TILE*0.5-6, 12,12);} 
        if(t.fort){ ctx.fillStyle = '#403b3b'; ctx.fillRect(px+6,py+6, TILE-12, TILE-12); }
      }
      // grid lines
      ctx.strokeStyle = 'rgba(255,255,255,0.02)'; ctx.strokeRect(px,py,TILE,TILE);
    }
    // draw units
    for(const u of state.units){
      const px = u.x*TILE + TILE/2, py = u.y*TILE + TILE/2;
      ctx.beginPath(); ctx.arc(px,py,10,0,Math.PI*2); ctx.fillStyle = u.owner===0? '#7dd3fc' : '#fb7185'; ctx.fill();
      ctx.fillStyle = '#022'; ctx.font = '12px monospace'; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.fillText('‚õµ', px, py+1);
    }
    // draw selection
    if(sel){ ctx.strokeStyle='rgba(255,255,255,0.9)'; ctx.lineWidth=2; ctx.strokeRect(sel.x*TILE+2, sel.y*TILE+2, TILE-4, TILE-4); }
  }

  function renderHUD(){
    document.getElementById('turn').textContent = `Turn ${state.turn}`;
    document.getElementById('phase').textContent = state.phase === 'player' ? 'Player' : 'AI';
    document.getElementById('res').textContent = state.resources;
  }

  // Selection & interaction
  let sel = null;
  canvas.addEventListener('click', (ev)=>{
    const rect = canvas.getBoundingClientRect();
    const mx = Math.floor((ev.clientX-rect.left)/ (rect.width / canvas.width));
    const my = Math.floor((ev.clientY-rect.top)/ (rect.height / canvas.height));
    const tx = Math.floor(mx / TILE), ty = Math.floor(my / TILE);
    clickTile(tx,ty);
  });

  function clickTile(tx,ty){
    const clickedUnit = state.units.find(u=>u.x===tx && u.y===ty && u.owner===0);
    if(clickedUnit){ sel = clickedUnit; pushLog('Selected ship.'); render(); return; }
    if(sel){
      const dist = Math.abs(sel.x-tx)+Math.abs(sel.y-ty);
      if(dist<=sel.moves){
        // move
        sel.x = tx; sel.y = ty; sel.moves -= Math.max(1,dist);
        pushLog(`Ship moved to ${tx},${ty}`);
        // capture land
        if(state.map[ty][tx].type==='land' && state.map[ty][tx].owner!==0){
          if(state.map[ty][tx].owner===1) pushLog('You wrested control from the Rival!');
          else pushLog('You captured land.');
          state.map[ty][tx].owner = 0;
          // collect resources when capturing
          const gain = 3 + rand(3);
          state.resources += gain;
          pushLog(`+${gain} resources collected.`);
        }
        renderHUD(); render();
      } else pushLog('Too far. Move closer.');
    }
  }

  // Turn progression
  document.getElementById('newBtn').onclick = ()=> newGame();
  document.getElementById('saveBtn').onclick = ()=>{
    localStorage.setItem('archipelago.save', JSON.stringify(state)); pushLog('Game saved to localStorage.');
  };
  document.getElementById('loadBtn').onclick = ()=>{
    const s = localStorage.getItem('archipelago.save');
    if(!s){ pushLog('No save found.'); return; }
    state = JSON.parse(s); pushLog('Game loaded.'); renderHUD(); render();
  };
  document.getElementById('exportBtn').onclick = ()=>{
    const blob = new Blob([JSON.stringify({map:state.map, units:state.units},null,2)],{type:'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href=url; a.download='archipelago-map.json'; a.click(); URL.revokeObjectURL(url);
  };

  function endTurn(){
    // reset moves, produce resources from forts
    for(const u of state.units) u.moves = 3;
    // forts produce
    let inc = 0;
    for(let y=0;y<ROWS;y++)for(let x=0;x<COLS;x++){
      const t = state.map[y][x]; if(t.fort && t.owner===0){ inc+=3; }
    }
    state.resources += inc;
    if(inc>0) pushLog(`Your outposts produced ${inc} resources.`);

    // AI phase
    state.phase = 'ai'; renderHUD();
    setTimeout(()=>{ aiTurn(); }, 400);
  }

  function aiTurn(){
    pushLog('Rival is thinking...');
    // Simple AI: move towards nearest neutral land and capture, or spawn new ship if resources
    const rivalUnits = state.units.filter(u=>u.owner===1);
    for(const u of rivalUnits){
      // find nearest land tile not owned by rival
      let best = null, bestd=9999;
      for(let y=0;y<ROWS;y++)for(let x=0;x<COLS;x++){
        if(state.map[y][x].type==='land' && state.map[y][x].owner!==1){
          const d = Math.abs(u.x-x)+Math.abs(u.y-y);
          if(d<bestd){ bestd=d; best={x,y}; }
        }
      }
      if(best){
        // step towards
        const dx = Math.sign(best.x - u.x), dy = Math.sign(best.y - u.y);
        u.x += dx; u.y += dy;
        // capture
        if(state.map[u.y][u.x].type==='land' && state.map[u.y][u.x].owner!==1){
          state.map[u.y][u.x].owner = 1; pushLog('Rival captured land.');
        }
      } else {
        // wander
        u.x = Math.max(0, Math.min(COLS-1, u.x + (rand(3)-1)));
        u.y = Math.max(0, Math.min(ROWS-1, u.y + (rand(3)-1)));
      }
    }
    // rival builds fort sometimes
    for(let y=0;y<ROWS;y++)for(let x=0;x<COLS;x++){
      const t = state.map[y][x]; if(t.type==='land' && t.owner===1 && !t.fort && Math.random()<0.02){ t.fort=true; }
    }
    // rival occasionally spawns new unit if plenty of neutral land
    if(Math.random()<0.3){
      // find water adjacent to rival land
      for(let i=0;i<300;i++){
        const x = rand(COLS), y=rand(ROWS);
        if(state.map[y][x].type==='water'){
          const adj = neighbors(x,y); if(adj.some(p=>state.map[p.y][p.x].owner===1)){ state.units.push({id:Date.now()+Math.random(),x,y,owner:1,moves:3}); break; }
        }
      }
    }
    // AI end
    state.phase='player'; state.turn+=1; renderHUD(); pushLog('Your turn.'); render();
  }

  // Building outposts
  canvas.addEventListener('contextmenu', (e)=>{ e.preventDefault(); const rect = canvas.getBoundingClientRect(); const mx = Math.floor((e.clientX-rect.left)/(rect.width/canvas.width)); const my = Math.floor((e.clientY-rect.top)/(rect.height/canvas.height)); const tx=Math.floor(mx/TILE), ty=Math.floor(my/TILE); buildOutpost(tx,ty); });
  function buildOutpost(tx,ty){
    const t = state.map[ty][tx];
    if(t.type!=='land' || t.owner!==0) { pushLog('You must own land to build.'); return; }
    if(t.fort){ pushLog('There is already an outpost.'); return; }
    if(state.resources<10){ pushLog('Not enough resources to build (10).'); return; }
    state.resources -= 10; t.fort=true; pushLog('Outpost built. Produces 3 resources/turn.'); renderHUD(); render();
  }

  // Game loop
  function resize(){
    W = canvas.width = canvas.clientWidth * devicePixelRatio; H = canvas.height = canvas.clientHeight * devicePixelRatio;
    ctx.setTransform(devicePixelRatio,0,0,devicePixelRatio,0,0);
  }
  window.addEventListener('resize', resize);
  resize();

  // simple animation loop
  function loop(){ render(); requestAnimationFrame(loop); }
  loop();

  // start
  newGame();

  // keyboard shortcuts
  window.addEventListener('keydown', (e)=>{
    if(e.key==='Enter') endTurn();
    if(e.key==='s' && (e.ctrlKey||e.metaKey)){ e.preventDefault(); localStorage.setItem('archipelago.save', JSON.stringify(state)); pushLog('Game saved (shortcut).'); }
  });

})();
</script>
</body>
</html>
